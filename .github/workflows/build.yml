name: Build and Release

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Verify icon files exist (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Checking for icon files..."
          ls -la src-tauri/icons/
          echo "32x32.png exists:" $(test -f src-tauri/icons/32x32.png && echo "YES" || echo "NO")
          echo "128x128.png exists:" $(test -f src-tauri/icons/128x128.png && echo "YES" || echo "NO")
          echo "icon.icns exists:" $(test -f src-tauri/icons/icon.icns && echo "YES" || echo "NO")
          echo "icon.ico exists:" $(test -f src-tauri/icons/icon.ico && echo "YES" || echo "NO")

      - name: Verify icon files exist (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Checking for icon files..."
          Get-ChildItem -Path "src-tauri/icons/" -Name
          echo "32x32.png exists:" $(if (Test-Path "src-tauri/icons/32x32.png") { "YES" } else { "NO" })
          echo "128x128.png exists:" $(if (Test-Path "src-tauri/icons/128x128.png") { "YES" } else { "NO" })
          echo "icon.icns exists:" $(if (Test-Path "src-tauri/icons/icon.icns") { "YES" } else { "NO" })
          echo "icon.ico exists:" $(if (Test-Path "src-tauri/icons/icon.ico") { "YES" } else { "NO" })
        shell: pwsh

      - name: Build Tauri app (without release)
        if: github.ref_type != 'tag'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Build Tauri app (with release)
        if: github.ref_type == 'tag'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'MCP Server Configuration App ${{ github.ref_name }}'
          releaseBody: |
            ## üöÄ MCP Server Configuration App ${{ github.ref_name }}
            
            A desktop application for managing MCP (Model Context Protocol) server configurations for Claude Code users.
            
            ### üì¶ Downloads
            Choose the appropriate file for your operating system:
            
            - **Windows**: Download the `.msi` installer file
            - **macOS**: Download the `.dmg` file (Universal Binary - supports both Intel and Apple Silicon)
            - **Linux**: Download the `.AppImage` file for universal compatibility, or the `.deb` package for Debian/Ubuntu
            
            ### ‚ú® Key Features
            - üé® **Modern UI** with DaisyUI components and responsive design
            - ‚úèÔ∏è **Dual editing modes**: Form Editor and JSON Editor with real-time sync
            - ‚úÖ **Real-time validation** for MCP server configurations
            - üìö **Server library management** with saved configurations for reuse
            - üîî **Toast notifications** for better user experience
            - üåô **Theme switching** with multiple DaisyUI themes
            
            ### üõ†Ô∏è Technical Details
            - Built with **Tauri** + **TypeScript** + **Rust**
            - Cross-platform compatibility (Windows, macOS, Linux)
            - Native file dialogs and system integration
            - Local data storage with JSON configuration files
            
            ### üìã Installation Instructions
            1. Download the appropriate file for your platform
            2. **Windows**: Run the `.msi` installer
            3. **macOS**: Open the `.dmg` file and drag the app to Applications
            4. **Linux**: Make the `.AppImage` executable and run, or install the `.deb` package
            
            ---
            ü§ñ **Developed with Claude Code** | üåç [Documentation](https://github.com/${{ github.repository }}) | üìù [Korean README](https://github.com/${{ github.repository }}/blob/main/README.ko.md)
          releaseDraft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
          args: ${{ matrix.args }}

  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run build

      - name: Run linting (if available)
        run: npm run lint || echo "No lint script found"
        continue-on-error: true

      - name: Run tests (if available)
        run: npm test || echo "No test script found"
        continue-on-error: true